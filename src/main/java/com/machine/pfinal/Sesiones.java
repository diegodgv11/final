/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.machine.pfinal;

import com.formdev.flatlaf.FlatDarkLaf;
import com.machine.database.Database;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author diegodgv11
 */
public class Sesiones extends javax.swing.JFrame {

    private Long IDPaciente = null;
    private ArrayList<Long> tiposTerapiasIDs = new ArrayList<Long>();
    private ArrayList<Long> medicosIDs = new ArrayList<Long>();
    private ArrayList<Long> auxiliaresIDs = new ArrayList<Long>();
    private ArrayList<Long> auxiliaresAgregadosIDs = new ArrayList<Long>();
    private ArrayList<Long> ejerciciosIDs = new ArrayList<Long>();
    private ArrayList<Long> ejerciciosAgregadosIDs = new ArrayList<Long>();

    public Sesiones() {
        initComponents();

        Connection connection = Database.getConnection();
        String queryTipos = "SELECT ID_Tipo, Descripcion FROM Tipos_Terapias";

        try {
            PreparedStatement statement = connection.prepareStatement(queryTipos);
            ResultSet results = statement.executeQuery();

            while (results.next()) {
                comboTiposTerapias.addItem(results.getString("Descripcion"));
                tiposTerapiasIDs.add(results.getLong(1));
            }
            statement.close();

        } catch (SQLException error) {
            JOptionPane.showMessageDialog(null, error, "Error", JOptionPane.ERROR_MESSAGE);
        }

        String queryMedicos = "SELECT ID_Medico, Licencia_Sanitaria, Nombre, Apellido FROM MEDICOS";

        try {
            PreparedStatement statement = connection.prepareStatement(queryMedicos);
            ResultSet results = statement.executeQuery();

            while (results.next()) {
                comboMedicos.addItem(results.getString("Licencia_Sanitaria") + " - " + results.getString("Nombre") + " " + results.getString("Apellido"));
                medicosIDs.add(results.getLong(1));
            }
            statement.close();

        } catch (SQLException error) {
            JOptionPane.showMessageDialog(null, error, "Error", JOptionPane.ERROR_MESSAGE);
        }

        String query = "SELECT ID_Ejercicio, Descripcion FROM Ejercicios";
        try {
            var statement = connection.prepareStatement(query);
            ResultSet results = statement.executeQuery();

            while (results.next()) {
                comboEjercicios.addItem(results.getString("Descripcion"));
                ejerciciosIDs.add(results.getLong("ID_Ejercicio"));
            }

            statement.close();

        } catch (SQLException error) {

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        jLabel1 = new javax.swing.JLabel();
        JPanelPersonal = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtDpi = new javax.swing.JTextField();
        txtNombreCompleto = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        btnBuscar = new javax.swing.JButton();
        JPanelPersonal1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jPanelDatePicker1 = new com.machine.pfinal.JPanelDatePicker();
        jLabel6 = new javax.swing.JLabel();
        comboMedicos = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        comboTiposTerapias = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAnotaciones = new javax.swing.JTextArea();
        btnAgregar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableSesiones = new javax.swing.JTable();
        btnActualizarTabla = new javax.swing.JButton();
        btnVer = new javax.swing.JButton();
        JPanelPersonal2 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        btnAgregarAuxiliar = new javax.swing.JButton();
        txtAuxiliar = new javax.swing.JTextField();
        comboAuxiliares = new javax.swing.JComboBox<>();
        btnRemoverAuxiliar = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        JPanelPersonal3 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        btnAgregarEjercicio = new javax.swing.JButton();
        comboEjerciciosAgregados = new javax.swing.JComboBox<>();
        btnRemoverEjercicio = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        comboEjercicios = new javax.swing.JComboBox<>();

        jMenu1.setText("jMenu1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("sansserif", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Sesiones");

        JPanelPersonal.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(javax.swing.UIManager.getDefaults().getColor("Button.background")), "Paciente", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("sansserif", 0, 18), javax.swing.UIManager.getDefaults().getColor("Actions.Grey"))); // NOI18N
        JPanelPersonal.setForeground(new java.awt.Color(204, 204, 204));
        JPanelPersonal.setToolTipText("");

        jLabel2.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("CUI Paciente:");

        txtDpi.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N

        txtNombreCompleto.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        txtNombreCompleto.setEnabled(false);

        jLabel4.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Nombre completo: ");

        btnBuscar.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.Blue"));
        btnBuscar.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        btnBuscar.setForeground(new java.awt.Color(255, 255, 255));
        btnBuscar.setText("Buscar");
        btnBuscar.setToolTipText("");
        btnBuscar.setPreferredSize(new java.awt.Dimension(198, 102));
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout JPanelPersonalLayout = new javax.swing.GroupLayout(JPanelPersonal);
        JPanelPersonal.setLayout(JPanelPersonalLayout);
        JPanelPersonalLayout.setHorizontalGroup(
            JPanelPersonalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPanelPersonalLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(JPanelPersonalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(JPanelPersonalLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtNombreCompleto, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(JPanelPersonalLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(txtDpi, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        JPanelPersonalLayout.setVerticalGroup(
            JPanelPersonalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPanelPersonalLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(JPanelPersonalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtDpi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(JPanelPersonalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtNombreCompleto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(39, Short.MAX_VALUE))
        );

        JPanelPersonal1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(javax.swing.UIManager.getDefaults().getColor("Button.background")), "Terapia", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("sansserif", 0, 18), javax.swing.UIManager.getDefaults().getColor("Actions.Grey"))); // NOI18N
        JPanelPersonal1.setForeground(new java.awt.Color(204, 204, 204));
        JPanelPersonal1.setToolTipText("");

        jLabel5.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Fecha:");

        jLabel6.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Tipo de terapia:");

        comboMedicos.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N

        jLabel7.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Médico a cargo:");

        comboTiposTerapias.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N

        jLabel8.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Anotaciones:");

        txtAnotaciones.setColumns(20);
        txtAnotaciones.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        txtAnotaciones.setRows(5);
        jScrollPane1.setViewportView(txtAnotaciones);

        javax.swing.GroupLayout JPanelPersonal1Layout = new javax.swing.GroupLayout(JPanelPersonal1);
        JPanelPersonal1.setLayout(JPanelPersonal1Layout);
        JPanelPersonal1Layout.setHorizontalGroup(
            JPanelPersonal1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPanelPersonal1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(JPanelPersonal1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(JPanelPersonal1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(jPanelDatePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(JPanelPersonal1Layout.createSequentialGroup()
                        .addGroup(JPanelPersonal1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(18, 18, 18)
                        .addGroup(JPanelPersonal1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(comboTiposTerapias, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(comboMedicos, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        JPanelPersonal1Layout.setVerticalGroup(
            JPanelPersonal1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPanelPersonal1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(JPanelPersonal1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanelDatePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(20, 20, 20)
                .addGroup(JPanelPersonal1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(comboTiposTerapias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(JPanelPersonal1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboMedicos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnAgregar.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.Blue"));
        btnAgregar.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        btnAgregar.setForeground(new java.awt.Color(255, 255, 255));
        btnAgregar.setText("Agregar");
        btnAgregar.setToolTipText("");
        btnAgregar.setPreferredSize(new java.awt.Dimension(198, 102));
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        btnLimpiar.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.GreyInline"));
        btnLimpiar.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        btnLimpiar.setForeground(new java.awt.Color(255, 255, 255));
        btnLimpiar.setText("Limpiar");
        btnLimpiar.setToolTipText("");
        btnLimpiar.setPreferredSize(new java.awt.Dimension(198, 102));
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        tableSesiones.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        tableSesiones.setForeground(new java.awt.Color(255, 255, 255));
        tableSesiones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Paciente", "Fecha", "Tipo de terapia", "Médico a cargo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableSesiones.setShowGrid(true);
        tableSesiones.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tableSesiones);

        btnActualizarTabla.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.Green"));
        btnActualizarTabla.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        btnActualizarTabla.setForeground(new java.awt.Color(255, 255, 255));
        btnActualizarTabla.setText("Actualizar");
        btnActualizarTabla.setToolTipText("");
        btnActualizarTabla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarTablaActionPerformed(evt);
            }
        });

        btnVer.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.GreyInline"));
        btnVer.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        btnVer.setForeground(new java.awt.Color(255, 255, 255));
        btnVer.setText("Ver más");
        btnVer.setToolTipText("");
        btnVer.setPreferredSize(new java.awt.Dimension(198, 102));
        btnVer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerActionPerformed(evt);
            }
        });

        JPanelPersonal2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(javax.swing.UIManager.getDefaults().getColor("Button.background")), "Auxiliares", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("sansserif", 0, 18), javax.swing.UIManager.getDefaults().getColor("Actions.Grey"))); // NOI18N
        JPanelPersonal2.setForeground(new java.awt.Color(204, 204, 204));
        JPanelPersonal2.setToolTipText("");

        jLabel11.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("CUI Auxiliar:");

        btnAgregarAuxiliar.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.Blue"));
        btnAgregarAuxiliar.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        btnAgregarAuxiliar.setForeground(new java.awt.Color(255, 255, 255));
        btnAgregarAuxiliar.setText("+");
        btnAgregarAuxiliar.setToolTipText("");
        btnAgregarAuxiliar.setPreferredSize(new java.awt.Dimension(198, 102));
        btnAgregarAuxiliar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarAuxiliarActionPerformed(evt);
            }
        });

        txtAuxiliar.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N

        comboAuxiliares.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N

        btnRemoverAuxiliar.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.Red"));
        btnRemoverAuxiliar.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        btnRemoverAuxiliar.setForeground(new java.awt.Color(255, 255, 255));
        btnRemoverAuxiliar.setText("-");
        btnRemoverAuxiliar.setToolTipText("");
        btnRemoverAuxiliar.setPreferredSize(new java.awt.Dimension(198, 102));
        btnRemoverAuxiliar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoverAuxiliarActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("Auxiliares:");

        javax.swing.GroupLayout JPanelPersonal2Layout = new javax.swing.GroupLayout(JPanelPersonal2);
        JPanelPersonal2.setLayout(JPanelPersonal2Layout);
        JPanelPersonal2Layout.setHorizontalGroup(
            JPanelPersonal2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPanelPersonal2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(JPanelPersonal2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(JPanelPersonal2Layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboAuxiliares, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(btnRemoverAuxiliar, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(JPanelPersonal2Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtAuxiliar, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addComponent(btnAgregarAuxiliar, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        JPanelPersonal2Layout.setVerticalGroup(
            JPanelPersonal2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPanelPersonal2Layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addGroup(JPanelPersonal2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(txtAuxiliar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAgregarAuxiliar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(JPanelPersonal2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(JPanelPersonal2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(JPanelPersonal2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comboAuxiliares, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, JPanelPersonal2Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(btnRemoverAuxiliar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(64, Short.MAX_VALUE))
        );

        JPanelPersonal3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(javax.swing.UIManager.getDefaults().getColor("Button.background")), "Ejercicios", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("sansserif", 0, 18), javax.swing.UIManager.getDefaults().getColor("Actions.Grey"))); // NOI18N
        JPanelPersonal3.setForeground(new java.awt.Color(204, 204, 204));
        JPanelPersonal3.setToolTipText("");

        jLabel12.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Ejercicio:");

        btnAgregarEjercicio.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.Blue"));
        btnAgregarEjercicio.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        btnAgregarEjercicio.setForeground(new java.awt.Color(255, 255, 255));
        btnAgregarEjercicio.setText("+");
        btnAgregarEjercicio.setToolTipText("");
        btnAgregarEjercicio.setPreferredSize(new java.awt.Dimension(198, 102));
        btnAgregarEjercicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarEjercicioActionPerformed(evt);
            }
        });

        comboEjerciciosAgregados.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N

        btnRemoverEjercicio.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.Red"));
        btnRemoverEjercicio.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        btnRemoverEjercicio.setForeground(new java.awt.Color(255, 255, 255));
        btnRemoverEjercicio.setText("-");
        btnRemoverEjercicio.setToolTipText("");
        btnRemoverEjercicio.setPreferredSize(new java.awt.Dimension(198, 102));
        btnRemoverEjercicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoverEjercicioActionPerformed(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("Ejercicios:");

        comboEjercicios.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N

        javax.swing.GroupLayout JPanelPersonal3Layout = new javax.swing.GroupLayout(JPanelPersonal3);
        JPanelPersonal3.setLayout(JPanelPersonal3Layout);
        JPanelPersonal3Layout.setHorizontalGroup(
            JPanelPersonal3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPanelPersonal3Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(JPanelPersonal3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(JPanelPersonal3Layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(comboEjerciciosAgregados, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(JPanelPersonal3Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(comboEjercicios, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(2, 2, 2)
                .addGroup(JPanelPersonal3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnRemoverEjercicio, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAgregarEjercicio, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        JPanelPersonal3Layout.setVerticalGroup(
            JPanelPersonal3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPanelPersonal3Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(JPanelPersonal3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(btnAgregarEjercicio, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboEjercicios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(JPanelPersonal3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboEjerciciosAgregados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRemoverEjercicio, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addContainerGap(62, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(JPanelPersonal1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(JPanelPersonal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(JPanelPersonal3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(JPanelPersonal2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(61, 61, 61)
                                .addComponent(btnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnActualizarTabla, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnVer, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 589, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(337, 337, 337)
                        .addComponent(jLabel1)))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(btnActualizarTabla, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnVer, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(JPanelPersonal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(JPanelPersonal1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(JPanelPersonal2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JPanelPersonal3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(87, 87, 87)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void limpiar() {
        IDPaciente = null;

        txtDpi.setText("");
        txtNombreCompleto.setText("");
        jPanelDatePicker1.setText("");

        if (comboTiposTerapias.getItemCount() > 0) {
            comboTiposTerapias.setSelectedIndex(0);
        }

        if (comboMedicos.getItemCount() > 0) {
            comboMedicos.setSelectedIndex(0);
        }

        if (comboEjercicios.getItemCount() > 0) {
            comboEjercicios.setSelectedIndex(0);
        }

        txtAnotaciones.setText("");
        txtAuxiliar.setText("");
        comboAuxiliares.removeAllItems();
        comboEjerciciosAgregados.removeAllItems();

        ejerciciosAgregadosIDs.clear();
        auxiliaresAgregadosIDs.clear();
    }

    private void agregarEjerciciosSesion(Long IDSesion) {
        Connection connection = Database.getConnection();

        String query = "INSERT INTO Ejercicios_Sesion(ID_Sesion, ID_Ejercicio) VALUES(?, ?)";
        try {
            PreparedStatement statement = connection.prepareStatement(query);
            for (Long IDEjercicio : ejerciciosAgregadosIDs) {
                statement.setLong(1, IDSesion);
                statement.setLong(2, IDEjercicio);
                statement.executeUpdate();
            }
            statement.close();
        } catch (SQLException error) {
            JOptionPane.showMessageDialog(null, "Error inesperado", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void agregarInvolucrados(Long IDSesion) {
        Connection connection = Database.getConnection();

        String query = "INSERT INTO Involucrados(ID_Empleado, ID_Sesion) VALUES(?, ?)";
        try {
            PreparedStatement statement = connection.prepareStatement(query);
            for (Long IDAuxiliar : auxiliaresAgregadosIDs) {
                statement.setLong(1, IDAuxiliar);
                statement.setLong(2, IDSesion);
                statement.executeUpdate();
            }
            statement.close();
        } catch (SQLException error) {
            JOptionPane.showMessageDialog(null, "Error inesperado", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed

        if (IDPaciente == null) {
            JOptionPane.showMessageDialog(null, "Primero debes seleccionar un paciente", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        Long IDMedico = null;
        if (medicosIDs.size() > 0) {
            IDMedico = medicosIDs.get(comboMedicos.getSelectedIndex());
        }

        Connection connection = Database.getConnection();
        String query = "INSERT INTO Sesiones(ID_Paciente, Fecha, ID_Terapia, ID_Medico, Resultados) VALUES(?,?,?,?,?)";

        try {
            PreparedStatement statement = connection.prepareStatement(query);
            statement.setLong(1, IDPaciente);
            statement.setDate(2, java.sql.Date.valueOf(jPanelDatePicker1.getText()));

            if (comboTiposTerapias.getItemCount() == 0 || comboTiposTerapias.getItemAt(comboTiposTerapias.getSelectedIndex()).isBlank()) {
                statement.setNull(3, Types.INTEGER);
            } else {
                statement.setLong(3, tiposTerapiasIDs.get(comboTiposTerapias.getSelectedIndex()));
            }

            if (IDMedico == null) {
                statement.setNull(4, Types.INTEGER);
            } else {
                statement.setLong(4, IDMedico);
            }

            statement.setString(5, txtAnotaciones.getText());
            statement.executeUpdate();

            ResultSet result = statement.getGeneratedKeys();

            if (result.next()) {
                agregarEjerciciosSesion(result.getLong(1));
                agregarInvolucrados(result.getLong(1));
                JOptionPane.showMessageDialog(null, "Medico agregado correctamente", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                limpiar();
            } else {
                JOptionPane.showMessageDialog(null, "Medico no agregado", "Error", JOptionPane.ERROR_MESSAGE);
            }

            statement.close();

            limpiar();
        } catch (SQLException error) {
            JOptionPane.showMessageDialog(null, error, "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        limpiar();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnAgregarAuxiliarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarAuxiliarActionPerformed

        if (txtAuxiliar.getText().isBlank()) {
            JOptionPane.showMessageDialog(null, "Campo vacío", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        Connection connection = Database.getConnection();
        String query = "SELECT ID_Empleado, Nombre, Apellido FROM Empleados WHERE DPI=?";
        try {
            var statement = connection.prepareStatement(query);
            statement.setString(1, txtAuxiliar.getText().trim());
            ResultSet results = statement.executeQuery();

            if (results.next()) {
                comboAuxiliares.addItem(results.getString("Nombre") + " " + results.getString("Apellido"));
                JOptionPane.showMessageDialog(null, "Auxiliar agregado", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                auxiliaresAgregadosIDs.add(results.getLong("ID_Empleado"));
                txtAuxiliar.setText("");
            } else {
                JOptionPane.showMessageDialog(null, "Auxiliar no encontrado", "Error", JOptionPane.ERROR_MESSAGE);
            }

            statement.close();

        } catch (SQLException error) {

        }

    }//GEN-LAST:event_btnAgregarAuxiliarActionPerformed

    private void btnRemoverAuxiliarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverAuxiliarActionPerformed
        if (comboAuxiliares.getItemCount() > 0) {
            var index = comboAuxiliares.getSelectedIndex();
            comboAuxiliares.removeItemAt(index);
            auxiliaresAgregadosIDs.remove(index);
        }
    }//GEN-LAST:event_btnRemoverAuxiliarActionPerformed

    private void btnActualizarTablaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarTablaActionPerformed
        Connection connection = Database.getConnection();
        DefaultTableModel tableModel = (DefaultTableModel) tableSesiones.getModel();

        while (tableModel.getRowCount() > 0) {
            tableModel.removeRow(0);
        }

        String query = "SELECT ID_Sesion, ID_Paciente, Fecha, ID_Terapia, ID_Medico, Resultados FROM SESIONES";
        try {
            PreparedStatement statement = connection.prepareStatement(query);
            ResultSet results = statement.executeQuery();

            while (results.next()) {

                tableModel.addRow(new String[]{
                    results.getString("ID_Sesion"),
                    results.getString("ID_Paciente"),
                    results.getString("Fecha"),
                    results.getString("ID_Terapia"),
                    results.getString("ID_Medico")});

            }

            statement.close();

            tableSesiones.setModel(tableModel);

        } catch (SQLException error) {
            JOptionPane.showMessageDialog(null, error, "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnActualizarTablaActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed

        IDPaciente = null;
        txtNombreCompleto.setText("");

        if (txtDpi.getText().isBlank()) {
            JOptionPane.showMessageDialog(null, "Ingresa un CUI para buscar", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        Connection connection = Database.getConnection();
        String pacienteQuery = "SELECT ID_Paciente, Nombre, Apellido FROM Pacientes WHERE DPI=?";
        try {
            var statement = connection.prepareStatement(pacienteQuery);
            statement.setString(1, txtDpi.getText().trim());
            ResultSet results = statement.executeQuery();

            if (results.next()) {
                txtNombreCompleto.setText(results.getString("Nombre") + " " + results.getString("Apellido"));
                JOptionPane.showMessageDialog(null, "Paciente encontrado", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                IDPaciente = results.getLong("ID_Paciente");
            } else {
                JOptionPane.showMessageDialog(null, "Paciente no encontrado", "Error", JOptionPane.ERROR_MESSAGE);
            }

            statement.close();

        } catch (SQLException error) {

        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnAgregarEjercicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarEjercicioActionPerformed
        var selectedIndex = comboEjercicios.getSelectedIndex();

        if (comboEjercicios.getItemAt(selectedIndex).isBlank()) {
            JOptionPane.showMessageDialog(null, "Campo vacío", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        comboEjerciciosAgregados.addItem(comboEjercicios.getItemAt(selectedIndex));
        ejerciciosAgregadosIDs.add(ejerciciosIDs.get(selectedIndex));

    }//GEN-LAST:event_btnAgregarEjercicioActionPerformed

    private void btnRemoverEjercicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverEjercicioActionPerformed
        if (comboEjerciciosAgregados.getItemCount() > 0) {
            var index = comboEjerciciosAgregados.getSelectedIndex();
            comboEjerciciosAgregados.removeItemAt(index);
            ejerciciosAgregadosIDs.remove(index);
        }
    }//GEN-LAST:event_btnRemoverEjercicioActionPerformed

    private void btnVerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerActionPerformed

        if (tableSesiones.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(null, "Selecciona una sesión en la tabla", "Alerta", JOptionPane.OK_OPTION);
            return;
        }

        String query = "SELECT * FROM Sesiones WHERE ID_Sesion = ?";
        String auxiliaresQuery = "SELECT ID_Empleado FROM Involucrados WHERE ID_Sesion = ?";
        String ejerciciosQuery = "SELECT * FROM Ejercicios_Sesion WHERE ID_Sesion = ?";

        String pacienteQuery = "SELECT ID_Paciente, DPI, Nombre, Apellido FROM Pacientes WHERE ID_Paciente = ?";
        String tipoTerapiaQuery = "SELECT ID_Tipo, Descripcion FROM Tipos_Terapias WHERE ID_Tipo = ?";
        String medicoQuery = "SELECT ID_Medico, Licencia_Sanitaria, Nombre, Apellido FROM Medicos WHERE ID_Medico = ?";
        String empleadoQuery = "SELECT ID_Empleado, Nombre, Apellido FROM Empleados WHERE ID_Empleado = ?";
        String ejercicioQuery = "SELECT Descripcion FROM Ejercicios WHERE ID_Ejercicio = ?";

        long id = Long.parseLong((String) tableSesiones.getValueAt(tableSesiones.getSelectedRow(), 0));
        Connection connection = Database.getConnection();

        try {
            PreparedStatement statement = connection.prepareStatement(query);
            PreparedStatement auxiliaresStatement = connection.prepareStatement(auxiliaresQuery);
            PreparedStatement ejerciciosStatement = connection.prepareStatement(ejerciciosQuery);

            PreparedStatement pacienteStatement = connection.prepareStatement(pacienteQuery);
            PreparedStatement tipoTerapiaStatement = connection.prepareStatement(tipoTerapiaQuery);
            PreparedStatement medicoStatement = connection.prepareStatement(medicoQuery);
            PreparedStatement empleadoStatement = connection.prepareStatement(empleadoQuery);
            PreparedStatement ejercicioStatement = connection.prepareStatement(ejercicioQuery);

            statement.setLong(1, id);
            auxiliaresStatement.setLong(1, id);
            ejerciciosStatement.setLong(1, id);

            ResultSet results = statement.executeQuery();
            ResultSet resultsAuxiliares = auxiliaresStatement.executeQuery();
            ResultSet resultsEjercicios = ejerciciosStatement.executeQuery();

            var auxiliares = new ArrayList<String>();
            var ejercicios = new ArrayList<String>();

            while (resultsAuxiliares.next()) {
                empleadoStatement.setString(1, resultsAuxiliares.getString("ID_Empleado"));
                var resultEmpleado = empleadoStatement.executeQuery();

                if (resultEmpleado.next()) {
                    auxiliares.add(resultEmpleado.getString("Nombre") + " " + resultEmpleado.getString("Apellido"));
                }
            }

            while (resultsEjercicios.next()) {
                ejercicioStatement.setString(1, resultsEjercicios.getString("ID_Ejercicio"));
                var resultEjercicio = ejercicioStatement.executeQuery();

                if (resultEjercicio.next()) {
                    ejercicios.add(resultEjercicio.getString("Descripcion"));
                }
            }

            String nombreCompleto = "";
            String tipoTerapia = "";
            String medico = "";
            String DPI = "";

            if (results.next()) {

                pacienteStatement.setString(1, results.getString("ID_Paciente"));
                tipoTerapiaStatement.setString(1, results.getString("ID_Terapia"));
                medicoStatement.setString(1, results.getString("ID_Medico"));

                var resultPaciente = pacienteStatement.executeQuery();
                var resultTipoTerapia = tipoTerapiaStatement.executeQuery();
                var resultMedico = medicoStatement.executeQuery();

                if (resultPaciente.next()) {
                    nombreCompleto = resultPaciente.getString("Nombre") + " " + resultPaciente.getString("Apellido");
                    DPI = resultPaciente.getString("DPI");
                }

                if (resultTipoTerapia.next()) {
                    tipoTerapia = resultTipoTerapia.getString("Descripcion");
                }

                if (resultMedico.next()) {
                    medico = resultMedico.getString("Nombre") + " " + resultMedico.getString("Apellido");
                }

                new SesionDetalles(new String[]{
                    DPI,
                    nombreCompleto,
                    new SimpleDateFormat("dd/MM/yyyy").format(results.getDate("Fecha")),
                    tipoTerapia,
                    medico,
                    results.getString("Resultados")
                }, auxiliares, ejercicios).setVisible(true);
            }

            statement.close();
            auxiliaresStatement.close();
            ejerciciosStatement.close();
            pacienteStatement.close();
            tipoTerapiaStatement.close();
            medicoStatement.close();
            empleadoStatement.close();
            ejercicioStatement.close();

        } catch (SQLException error) {
            JOptionPane.showMessageDialog(null, error, "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnVerActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        FlatDarkLaf.setup();

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Sesiones().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel JPanelPersonal;
    private javax.swing.JPanel JPanelPersonal1;
    private javax.swing.JPanel JPanelPersonal2;
    private javax.swing.JPanel JPanelPersonal3;
    private javax.swing.JButton btnActualizarTabla;
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnAgregarAuxiliar;
    private javax.swing.JButton btnAgregarEjercicio;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnRemoverAuxiliar;
    private javax.swing.JButton btnRemoverEjercicio;
    private javax.swing.JButton btnVer;
    private javax.swing.JComboBox<String> comboAuxiliares;
    private javax.swing.JComboBox<String> comboEjercicios;
    private javax.swing.JComboBox<String> comboEjerciciosAgregados;
    private javax.swing.JComboBox<String> comboMedicos;
    private javax.swing.JComboBox<String> comboTiposTerapias;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu1;
    private com.machine.pfinal.JPanelDatePicker jPanelDatePicker1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tableSesiones;
    private javax.swing.JTextArea txtAnotaciones;
    private javax.swing.JTextField txtAuxiliar;
    private javax.swing.JTextField txtDpi;
    private javax.swing.JTextField txtNombreCompleto;
    // End of variables declaration//GEN-END:variables
}
